/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/eventRoutesMappers";
import * as Parameters from "../models/parameters";
import { AzureDigitalTwinsAPIContext } from "../azureDigitalTwinsAPIContext";

/** Class representing a EventRoutes. */
export class EventRoutes {
  private readonly client: AzureDigitalTwinsAPIContext;

  /**
   * Create a EventRoutes.
   * @param {AzureDigitalTwinsAPIContext} client Reference to the service client.
   */
  constructor(client: AzureDigitalTwinsAPIContext) {
    this.client = client;
  }

  /**
   * Retrieves all event routes.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventRoutesListResponse>
   */
  list(options?: Models.EventRoutesListOptionalParams): Promise<Models.EventRoutesListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.EventRouteCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.EventRoutesListOptionalParams, callback: msRest.ServiceCallback<Models.EventRouteCollection>): void;
  list(options?: Models.EventRoutesListOptionalParams | msRest.ServiceCallback<Models.EventRouteCollection>, callback?: msRest.ServiceCallback<Models.EventRouteCollection>): Promise<Models.EventRoutesListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.EventRoutesListResponse>;
  }

  /**
   * Retrieves an event route.
   * Status codes:
   * 200 (OK): Success.
   * 404 (Not Found): There is no event route with the provided id.
   * @param id The id for an event route. The id is unique within event routes and case sensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventRoutesGetByIdResponse>
   */
  getById(id: string, options?: msRest.RequestOptionsBase): Promise<Models.EventRoutesGetByIdResponse>;
  /**
   * @param id The id for an event route. The id is unique within event routes and case sensitive.
   * @param callback The callback
   */
  getById(id: string, callback: msRest.ServiceCallback<Models.EventRoute>): void;
  /**
   * @param id The id for an event route. The id is unique within event routes and case sensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  getById(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.EventRoute>): void;
  getById(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.EventRoute>, callback?: msRest.ServiceCallback<Models.EventRoute>): Promise<Models.EventRoutesGetByIdResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getByIdOperationSpec,
      callback) as Promise<Models.EventRoutesGetByIdResponse>;
  }

  /**
   * Adds or replaces an event route.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * @param id The id for an event route. The id is unique within event routes and case sensitive.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  add(id: string, options?: Models.EventRoutesAddOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param id The id for an event route. The id is unique within event routes and case sensitive.
   * @param callback The callback
   */
  add(id: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id The id for an event route. The id is unique within event routes and case sensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  add(id: string, options: Models.EventRoutesAddOptionalParams, callback: msRest.ServiceCallback<void>): void;
  add(id: string, options?: Models.EventRoutesAddOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      addOperationSpec,
      callback);
  }

  /**
   * Deletes an event route.
   * Status codes:
   * 200 (OK): Success.
   * 404 (Not Found): There is no event route with the provided id.
   * @param id The id for an event route. The id is unique within event routes and case sensitive.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param id The id for an event route. The id is unique within event routes and case sensitive.
   * @param callback The callback
   */
  deleteMethod(id: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id The id for an event route. The id is unique within event routes and case sensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Retrieves all event routes.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventRoutesListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.EventRoutesListNextOptionalParams): Promise<Models.EventRoutesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.EventRouteCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.EventRoutesListNextOptionalParams, callback: msRest.ServiceCallback<Models.EventRouteCollection>): void;
  listNext(nextPageLink: string, options?: Models.EventRoutesListNextOptionalParams | msRest.ServiceCallback<Models.EventRouteCollection>, callback?: msRest.ServiceCallback<Models.EventRouteCollection>): Promise<Models.EventRoutesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.EventRoutesListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "eventroutes",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.maxItemCount1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventRouteCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "eventroutes/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventRoute
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const addOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "eventroutes/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "eventRoute"
    ],
    mapper: Mappers.EventRoute
  },
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "eventroutes/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "http://localhost",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.maxItemCount1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventRouteCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
