/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const EventRoute: msRest.CompositeMapper = {
  serializedName: "EventRoute",
  type: {
    name: "Composite",
    className: "EventRoute",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      endpointId: {
        required: true,
        serializedName: "endpointId",
        type: {
          name: "String"
        }
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModelData: msRest.CompositeMapper = {
  serializedName: "ModelData",
  type: {
    name: "Composite",
    className: "ModelData",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "Object"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "Object"
        }
      },
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      uploadTime: {
        serializedName: "uploadTime",
        type: {
          name: "DateTime"
        }
      },
      decommissioned: {
        serializedName: "decommissioned",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      model: {
        serializedName: "model",
        type: {
          name: "Object"
        }
      }
    }
  }
};

export const IncomingRelationship: msRest.CompositeMapper = {
  serializedName: "IncomingRelationship",
  type: {
    name: "Composite",
    className: "IncomingRelationship",
    modelProperties: {
      relationshipId: {
        serializedName: "$relationshipId",
        type: {
          name: "String"
        }
      },
      sourceId: {
        serializedName: "$sourceId",
        type: {
          name: "String"
        }
      },
      relationshipName: {
        serializedName: "$relationshipName",
        type: {
          name: "String"
        }
      },
      relationshipLink: {
        serializedName: "$relationshipLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuerySpecification: msRest.CompositeMapper = {
  serializedName: "QuerySpecification",
  type: {
    name: "Composite",
    className: "QuerySpecification",
    modelProperties: {
      query: {
        serializedName: "query",
        type: {
          name: "String"
        }
      },
      continuationToken: {
        serializedName: "continuationToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryResult: msRest.CompositeMapper = {
  serializedName: "QueryResult",
  type: {
    name: "Composite",
    className: "QueryResult",
    modelProperties: {
      items: {
        serializedName: "items",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Object"
            }
          }
        }
      },
      continuationToken: {
        serializedName: "continuationToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InnerError: msRest.CompositeMapper = {
  serializedName: "InnerError",
  type: {
    name: "Composite",
    className: "InnerError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "InnerError"
        }
      }
    }
  }
};

export const ErrorModel: msRest.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      details: {
        readOnly: true,
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorModel"
            }
          }
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "InnerError"
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const DigitalTwinModelsListOptions: msRest.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DigitalTwinModelsListOptions",
    modelProperties: {
      maxItemCount: {
        defaultValue: -1,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EventRoutesListOptions: msRest.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventRoutesListOptions",
    modelProperties: {
      maxItemCount: {
        defaultValue: -1,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const QueryQueryTwinsHeaders: msRest.CompositeMapper = {
  serializedName: "query-querytwins-headers",
  type: {
    name: "Composite",
    className: "QueryQueryTwinsHeaders",
    modelProperties: {
      queryCharge: {
        serializedName: "query-charge",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DigitalTwinsGetByIdHeaders: msRest.CompositeMapper = {
  serializedName: "digitaltwins-getbyid-headers",
  type: {
    name: "Composite",
    className: "DigitalTwinsGetByIdHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DigitalTwinsAddHeaders: msRest.CompositeMapper = {
  serializedName: "digitaltwins-add-headers",
  type: {
    name: "Composite",
    className: "DigitalTwinsAddHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DigitalTwinsUpdateHeaders: msRest.CompositeMapper = {
  serializedName: "digitaltwins-update-headers",
  type: {
    name: "Composite",
    className: "DigitalTwinsUpdateHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DigitalTwinsGetRelationshipByIdHeaders: msRest.CompositeMapper = {
  serializedName: "digitaltwins-getrelationshipbyid-headers",
  type: {
    name: "Composite",
    className: "DigitalTwinsGetRelationshipByIdHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DigitalTwinsAddRelationshipHeaders: msRest.CompositeMapper = {
  serializedName: "digitaltwins-addrelationship-headers",
  type: {
    name: "Composite",
    className: "DigitalTwinsAddRelationshipHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DigitalTwinsUpdateRelationshipHeaders: msRest.CompositeMapper = {
  serializedName: "digitaltwins-updaterelationship-headers",
  type: {
    name: "Composite",
    className: "DigitalTwinsUpdateRelationshipHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DigitalTwinsGetComponentHeaders: msRest.CompositeMapper = {
  serializedName: "digitaltwins-getcomponent-headers",
  type: {
    name: "Composite",
    className: "DigitalTwinsGetComponentHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DigitalTwinsUpdateComponentHeaders: msRest.CompositeMapper = {
  serializedName: "digitaltwins-updatecomponent-headers",
  type: {
    name: "Composite",
    className: "DigitalTwinsUpdateComponentHeaders",
    modelProperties: {
      eTag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PagedModelDataCollection: msRest.CompositeMapper = {
  serializedName: "PagedModelDataCollection",
  type: {
    name: "Composite",
    className: "PagedModelDataCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelData"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RelationshipCollection: msRest.CompositeMapper = {
  serializedName: "RelationshipCollection",
  type: {
    name: "Composite",
    className: "RelationshipCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Object"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IncomingRelationshipCollection: msRest.CompositeMapper = {
  serializedName: "IncomingRelationshipCollection",
  type: {
    name: "Composite",
    className: "IncomingRelationshipCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IncomingRelationship"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventRouteCollection: msRest.CompositeMapper = {
  serializedName: "EventRouteCollection",
  type: {
    name: "Composite",
    className: "EventRouteCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EventRoute"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
