// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AdtExplorer.Functions.Sdk
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EventRoutesOperations.
    /// </summary>
    public static partial class EventRoutesOperationsExtensions
    {
            /// <summary>
            /// Retrieves all event routes.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventRoutesListOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<EventRoute> List(this IEventRoutesOperations operations, EventRoutesListOptions eventRoutesListOptions = default(EventRoutesListOptions))
            {
                return operations.ListAsync(eventRoutesListOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all event routes.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventRoutesListOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventRoute>> ListAsync(this IEventRoutesOperations operations, EventRoutesListOptions eventRoutesListOptions = default(EventRoutesListOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(eventRoutesListOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves an event route.
            /// Status codes:
            /// 200 (OK): Success.
            /// 404 (Not Found): There is no event route with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id for an event route. The id is unique within event routes and case
            /// sensitive.
            /// </param>
            public static EventRoute GetById(this IEventRoutesOperations operations, string id)
            {
                return operations.GetByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves an event route.
            /// Status codes:
            /// 200 (OK): Success.
            /// 404 (Not Found): There is no event route with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id for an event route. The id is unique within event routes and case
            /// sensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventRoute> GetByIdAsync(this IEventRoutesOperations operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds or replaces an event route.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id for an event route. The id is unique within event routes and case
            /// sensitive.
            /// </param>
            /// <param name='eventRoute'>
            /// The event route data
            /// </param>
            public static void Add(this IEventRoutesOperations operations, string id, EventRoute eventRoute = default(EventRoute))
            {
                operations.AddAsync(id, eventRoute).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds or replaces an event route.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id for an event route. The id is unique within event routes and case
            /// sensitive.
            /// </param>
            /// <param name='eventRoute'>
            /// The event route data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddAsync(this IEventRoutesOperations operations, string id, EventRoute eventRoute = default(EventRoute), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddWithHttpMessagesAsync(id, eventRoute, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes an event route.
            /// Status codes:
            /// 200 (OK): Success.
            /// 404 (Not Found): There is no event route with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id for an event route. The id is unique within event routes and case
            /// sensitive.
            /// </param>
            public static void Delete(this IEventRoutesOperations operations, string id)
            {
                operations.DeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an event route.
            /// Status codes:
            /// 200 (OK): Success.
            /// 404 (Not Found): There is no event route with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id for an event route. The id is unique within event routes and case
            /// sensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IEventRoutesOperations operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves all event routes.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='eventRoutesListOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<EventRoute> ListNext(this IEventRoutesOperations operations, string nextPageLink, EventRoutesListOptions eventRoutesListOptions = default(EventRoutesListOptions))
            {
                return operations.ListNextAsync(nextPageLink, eventRoutesListOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all event routes.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='eventRoutesListOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EventRoute>> ListNextAsync(this IEventRoutesOperations operations, string nextPageLink, EventRoutesListOptions eventRoutesListOptions = default(EventRoutesListOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, eventRoutesListOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
