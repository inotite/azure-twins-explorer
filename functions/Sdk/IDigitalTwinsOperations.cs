// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AdtExplorer.Functions.Sdk
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// DigitalTwinsOperations operations.
    /// </summary>
    public partial interface IDigitalTwinsOperations
    {
        /// <summary>
        /// Retrieves a digital twin.
        /// Status codes:
        /// 200 (OK): Success.
        /// 404 (Not Found): There is no digital twin with the provided id.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin. The id is unique within the service and
        /// case sensitive.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<object,DigitalTwinsGetByIdHeaders>> GetByIdWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Adds or replaces a digital twin.
        /// Status codes:
        /// 200 (OK): Success.
        /// 400 (Bad Request): The request is invalid.
        /// 412 (Precondition Failed): The model is decommissioned or the
        /// digital twin already exists (when using If-None-Match: *).
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin. The id is unique within the service and
        /// case sensitive.
        /// </param>
        /// <param name='twin'>
        /// The digital twin instance being added. If provided, the $dtId
        /// property is ignored.
        /// </param>
        /// <param name='ifNoneMatch'>
        /// Only perform the operation if the entity does not already exist.
        /// Possible values include: '*'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<object,DigitalTwinsAddHeaders>> AddWithHttpMessagesAsync(string id, object twin, string ifNoneMatch = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a digital twin. All relationships referencing the digital
        /// twin must already be deleted.
        /// Status codes:
        /// 200 (OK): Success.
        /// 400 (Bad Request): The request is invalid.
        /// 404 (Not Found): There is no digital twin with the provided id.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin. The id is unique within the service and
        /// case sensitive.
        /// </param>
        /// <param name='ifMatch'>
        /// Only perform the operation if the entity's etag matches one of the
        /// etags provided or * is provided.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> DeleteWithHttpMessagesAsync(string id, string ifMatch = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a digital twin.
        /// Status codes:
        /// 200 (OK): Success.
        /// 400 (Bad Request): The request is invalid.
        /// 404 (Not Found): There is no digital twin with the provided id.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin. The id is unique within the service and
        /// case sensitive.
        /// </param>
        /// <param name='patchDocument'>
        /// An update specification described by JSON Patch. Updates to
        /// property values and $model elements may happen in the same request.
        /// Operations are limited to add, replace and remove.
        /// </param>
        /// <param name='ifMatch'>
        /// Only perform the operation if the entity's etag matches one of the
        /// etags provided or * is provided.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationHeaderResponse<DigitalTwinsUpdateHeaders>> UpdateWithHttpMessagesAsync(string id, IList<object> patchDocument, string ifMatch = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves a relationship between two digital twins.
        /// Status codes:
        /// 200 (OK): Success.
        /// 404 (Not Found): There is either no digital twin or relationship
        /// with the provided id.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin. The id is unique within the service and
        /// case sensitive.
        /// </param>
        /// <param name='relationshipId'>
        /// The id of the relationship. The id is unique within the digital
        /// twin and case sensitive.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<object,DigitalTwinsGetRelationshipByIdHeaders>> GetRelationshipByIdWithHttpMessagesAsync(string id, string relationshipId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Adds a relationship between two digital twins.
        /// Status codes:
        /// 200 (OK): Success.
        /// 400 (Bad Request): The request is invalid.
        /// 404 (Not Found): There is either no digital twin, target digital
        /// twin, or relationship with the provided id.
        /// 409 (Conflict): A relationship with the provided id already exists.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin. The id is unique within the service and
        /// case sensitive.
        /// </param>
        /// <param name='relationshipId'>
        /// The id of the relationship. The id is unique within the digital
        /// twin and case sensitive.
        /// </param>
        /// <param name='relationship'>
        /// The data for the relationship.
        /// </param>
        /// <param name='ifNoneMatch'>
        /// Only perform the operation if the entity does not already exist.
        /// Possible values include: '*'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<object,DigitalTwinsAddRelationshipHeaders>> AddRelationshipWithHttpMessagesAsync(string id, string relationshipId, object relationship = default(object), string ifNoneMatch = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a relationship between two digital twins.
        /// Status codes:
        /// 200 (OK): Success.
        /// 404 (Not Found): There is either no digital twin or relationship
        /// with the provided id.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin. The id is unique within the service and
        /// case sensitive.
        /// </param>
        /// <param name='relationshipId'>
        /// The id of the relationship. The id is unique within the digital
        /// twin and case sensitive.
        /// </param>
        /// <param name='ifMatch'>
        /// Only perform the operation if the entity's etag matches one of the
        /// etags provided or * is provided.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> DeleteRelationshipWithHttpMessagesAsync(string id, string relationshipId, string ifMatch = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates the properties on a relationship between two digital twins.
        /// Status codes:
        /// 200 (OK): Success.
        /// 400 (Bad Request): The request is invalid.
        /// 404 (Not Found): There is either no digital twin or relationship
        /// with the provided id.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin. The id is unique within the service and
        /// case sensitive.
        /// </param>
        /// <param name='relationshipId'>
        /// The id of the relationship. The id is unique within the digital
        /// twin and case sensitive.
        /// </param>
        /// <param name='patchDocument'>
        /// JSON Patch description of the update to the relationship
        /// properties.
        /// </param>
        /// <param name='ifMatch'>
        /// Only perform the operation if the entity's etag matches one of the
        /// etags provided or * is provided.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationHeaderResponse<DigitalTwinsUpdateRelationshipHeaders>> UpdateRelationshipWithHttpMessagesAsync(string id, string relationshipId, IList<object> patchDocument = default(IList<object>), string ifMatch = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves the relationships from a digital twin.
        /// Status codes:
        /// 200 (OK): Success.
        /// 400 (Bad Request): The request is invalid.
        /// 404 (Not Found): There is no digital twin with the provided id.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin. The id is unique within the service and
        /// case sensitive.
        /// </param>
        /// <param name='relationshipName'>
        /// The name of the relationship.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<object>>> ListRelationshipsWithHttpMessagesAsync(string id, string relationshipName = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves all incoming relationship for a digital twin.
        /// Status codes:
        /// 200 (OK): Success.
        /// 400 (Bad Request): The request is invalid.
        /// 404 (Not Found): There is no digital twin with the provided id.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin. The id is unique within the service and
        /// case sensitive.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<IncomingRelationship>>> ListIncomingRelationshipsWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sends telemetry on behalf of a digital twin.
        /// Status codes:
        /// 200 (OK): Success.
        /// 400 (Bad Request): The request is invalid.
        /// 404 (Not Found): There is no digital twin with the provided id.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin. The id is unique within the service and
        /// case sensitive.
        /// </param>
        /// <param name='telemetry'>
        /// The telemetry measurements to send from the digital twin.
        /// </param>
        /// <param name='dtId'>
        /// A unique message identifier (in the scope of the digital twin id)
        /// that is commonly used for de-duplicating messages.
        /// </param>
        /// <param name='dtTimestamp'>
        /// An RFC 3339 timestamp that identifies the time the telemetry was
        /// measured.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> SendTelemetryWithHttpMessagesAsync(string id, object telemetry, string dtId, string dtTimestamp = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Sends telemetry on behalf of a component in a digital twin.
        /// Status codes:
        /// 200 (OK): Success.
        /// 400 (Bad Request): The request is invalid.
        /// 404 (Not Found): There is either no digital twin with the provided
        /// id or the component path is invalid.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin. The id is unique within the service and
        /// case sensitive.
        /// </param>
        /// <param name='componentPath'>
        /// The name of the DTDL component.
        /// </param>
        /// <param name='telemetry'>
        /// The telemetry measurements to send from the digital twin's
        /// component.
        /// </param>
        /// <param name='dtId'>
        /// A unique message identifier (in the scope of the digital twin id)
        /// that is commonly used for de-duplicating messages.
        /// </param>
        /// <param name='dtTimestamp'>
        /// An RFC 3339 timestamp that identifies the time the telemetry was
        /// measured.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse> SendComponentTelemetryWithHttpMessagesAsync(string id, string componentPath, object telemetry, string dtId, string dtTimestamp = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves a component from a digital twin.
        /// Status codes:
        /// 200 (OK): Success.
        /// 404 (Not Found): There is either no digital twin with the provided
        /// id or the component path is invalid.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin. The id is unique within the service and
        /// case sensitive.
        /// </param>
        /// <param name='componentPath'>
        /// The name of the DTDL component.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<object,DigitalTwinsGetComponentHeaders>> GetComponentWithHttpMessagesAsync(string id, string componentPath, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a component on a digital twin.
        /// Status codes:
        /// 200 (OK): Success.
        /// 400 (Bad Request): The request is invalid.
        /// 404 (Not Found): There is either no digital twin with the provided
        /// id or the component path is invalid.
        /// </summary>
        /// <param name='id'>
        /// The id of the digital twin. The id is unique within the service and
        /// case sensitive.
        /// </param>
        /// <param name='componentPath'>
        /// The name of the DTDL component.
        /// </param>
        /// <param name='patchDocument'>
        /// An update specification described by JSON Patch. Updates to
        /// property values and $model elements may happen in the same request.
        /// Operations are limited to add, replace and remove.
        /// </param>
        /// <param name='ifMatch'>
        /// Only perform the operation if the entity's etag matches one of the
        /// etags provided or * is provided.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationHeaderResponse<DigitalTwinsUpdateComponentHeaders>> UpdateComponentWithHttpMessagesAsync(string id, string componentPath, IList<object> patchDocument = default(IList<object>), string ifMatch = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves the relationships from a digital twin.
        /// Status codes:
        /// 200 (OK): Success.
        /// 400 (Bad Request): The request is invalid.
        /// 404 (Not Found): There is no digital twin with the provided id.
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<object>>> ListRelationshipsNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieves all incoming relationship for a digital twin.
        /// Status codes:
        /// 200 (OK): Success.
        /// 400 (Bad Request): The request is invalid.
        /// 404 (Not Found): There is no digital twin with the provided id.
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<AzureOperationResponse<IPage<IncomingRelationship>>> ListIncomingRelationshipsNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
