// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AdtExplorer.Functions.Sdk
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DigitalTwinsOperations.
    /// </summary>
    public static partial class DigitalTwinsOperationsExtensions
    {
            /// <summary>
            /// Retrieves a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 404 (Not Found): There is no digital twin with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            public static object GetById(this IDigitalTwinsOperations operations, string id)
            {
                return operations.GetByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 404 (Not Found): There is no digital twin with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByIdAsync(this IDigitalTwinsOperations operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds or replaces a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 412 (Precondition Failed): The model is decommissioned or the digital twin
            /// already exists (when using If-None-Match: *).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='twin'>
            /// The digital twin instance being added. If provided, the $dtId property is
            /// ignored.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Only perform the operation if the entity does not already exist. Possible
            /// values include: '*'
            /// </param>
            public static object Add(this IDigitalTwinsOperations operations, string id, object twin, string ifNoneMatch = default(string))
            {
                return operations.AddAsync(id, twin, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds or replaces a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 412 (Precondition Failed): The model is decommissioned or the digital twin
            /// already exists (when using If-None-Match: *).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='twin'>
            /// The digital twin instance being added. If provided, the $dtId property is
            /// ignored.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Only perform the operation if the entity does not already exist. Possible
            /// values include: '*'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddAsync(this IDigitalTwinsOperations operations, string id, object twin, string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddWithHttpMessagesAsync(id, twin, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a digital twin. All relationships referencing the digital twin must
            /// already be deleted.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is no digital twin with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='ifMatch'>
            /// Only perform the operation if the entity's etag matches one of the etags
            /// provided or * is provided.
            /// </param>
            public static void Delete(this IDigitalTwinsOperations operations, string id, string ifMatch = default(string))
            {
                operations.DeleteAsync(id, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a digital twin. All relationships referencing the digital twin must
            /// already be deleted.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is no digital twin with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='ifMatch'>
            /// Only perform the operation if the entity's etag matches one of the etags
            /// provided or * is provided.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDigitalTwinsOperations operations, string id, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(id, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is no digital twin with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='patchDocument'>
            /// An update specification described by JSON Patch. Updates to property values
            /// and $model elements may happen in the same request. Operations are limited
            /// to add, replace and remove.
            /// </param>
            /// <param name='ifMatch'>
            /// Only perform the operation if the entity's etag matches one of the etags
            /// provided or * is provided.
            /// </param>
            public static DigitalTwinsUpdateHeaders Update(this IDigitalTwinsOperations operations, string id, IList<object> patchDocument, string ifMatch = default(string))
            {
                return operations.UpdateAsync(id, patchDocument, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is no digital twin with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='patchDocument'>
            /// An update specification described by JSON Patch. Updates to property values
            /// and $model elements may happen in the same request. Operations are limited
            /// to add, replace and remove.
            /// </param>
            /// <param name='ifMatch'>
            /// Only perform the operation if the entity's etag matches one of the etags
            /// provided or * is provided.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DigitalTwinsUpdateHeaders> UpdateAsync(this IDigitalTwinsOperations operations, string id, IList<object> patchDocument, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(id, patchDocument, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Retrieves a relationship between two digital twins.
            /// Status codes:
            /// 200 (OK): Success.
            /// 404 (Not Found): There is either no digital twin or relationship with the
            /// provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='relationshipId'>
            /// The id of the relationship. The id is unique within the digital twin and
            /// case sensitive.
            /// </param>
            public static object GetRelationshipById(this IDigitalTwinsOperations operations, string id, string relationshipId)
            {
                return operations.GetRelationshipByIdAsync(id, relationshipId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a relationship between two digital twins.
            /// Status codes:
            /// 200 (OK): Success.
            /// 404 (Not Found): There is either no digital twin or relationship with the
            /// provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='relationshipId'>
            /// The id of the relationship. The id is unique within the digital twin and
            /// case sensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetRelationshipByIdAsync(this IDigitalTwinsOperations operations, string id, string relationshipId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRelationshipByIdWithHttpMessagesAsync(id, relationshipId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a relationship between two digital twins.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is either no digital twin, target digital twin, or
            /// relationship with the provided id.
            /// 409 (Conflict): A relationship with the provided id already exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='relationshipId'>
            /// The id of the relationship. The id is unique within the digital twin and
            /// case sensitive.
            /// </param>
            /// <param name='relationship'>
            /// The data for the relationship.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Only perform the operation if the entity does not already exist. Possible
            /// values include: '*'
            /// </param>
            public static object AddRelationship(this IDigitalTwinsOperations operations, string id, string relationshipId, object relationship = default(object), string ifNoneMatch = default(string))
            {
                return operations.AddRelationshipAsync(id, relationshipId, relationship, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a relationship between two digital twins.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is either no digital twin, target digital twin, or
            /// relationship with the provided id.
            /// 409 (Conflict): A relationship with the provided id already exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='relationshipId'>
            /// The id of the relationship. The id is unique within the digital twin and
            /// case sensitive.
            /// </param>
            /// <param name='relationship'>
            /// The data for the relationship.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Only perform the operation if the entity does not already exist. Possible
            /// values include: '*'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddRelationshipAsync(this IDigitalTwinsOperations operations, string id, string relationshipId, object relationship = default(object), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddRelationshipWithHttpMessagesAsync(id, relationshipId, relationship, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a relationship between two digital twins.
            /// Status codes:
            /// 200 (OK): Success.
            /// 404 (Not Found): There is either no digital twin or relationship with the
            /// provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='relationshipId'>
            /// The id of the relationship. The id is unique within the digital twin and
            /// case sensitive.
            /// </param>
            /// <param name='ifMatch'>
            /// Only perform the operation if the entity's etag matches one of the etags
            /// provided or * is provided.
            /// </param>
            public static void DeleteRelationship(this IDigitalTwinsOperations operations, string id, string relationshipId, string ifMatch = default(string))
            {
                operations.DeleteRelationshipAsync(id, relationshipId, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a relationship between two digital twins.
            /// Status codes:
            /// 200 (OK): Success.
            /// 404 (Not Found): There is either no digital twin or relationship with the
            /// provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='relationshipId'>
            /// The id of the relationship. The id is unique within the digital twin and
            /// case sensitive.
            /// </param>
            /// <param name='ifMatch'>
            /// Only perform the operation if the entity's etag matches one of the etags
            /// provided or * is provided.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteRelationshipAsync(this IDigitalTwinsOperations operations, string id, string relationshipId, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteRelationshipWithHttpMessagesAsync(id, relationshipId, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the properties on a relationship between two digital twins.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is either no digital twin or relationship with the
            /// provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='relationshipId'>
            /// The id of the relationship. The id is unique within the digital twin and
            /// case sensitive.
            /// </param>
            /// <param name='patchDocument'>
            /// JSON Patch description of the update to the relationship properties.
            /// </param>
            /// <param name='ifMatch'>
            /// Only perform the operation if the entity's etag matches one of the etags
            /// provided or * is provided.
            /// </param>
            public static DigitalTwinsUpdateRelationshipHeaders UpdateRelationship(this IDigitalTwinsOperations operations, string id, string relationshipId, IList<object> patchDocument = default(IList<object>), string ifMatch = default(string))
            {
                return operations.UpdateRelationshipAsync(id, relationshipId, patchDocument, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the properties on a relationship between two digital twins.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is either no digital twin or relationship with the
            /// provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='relationshipId'>
            /// The id of the relationship. The id is unique within the digital twin and
            /// case sensitive.
            /// </param>
            /// <param name='patchDocument'>
            /// JSON Patch description of the update to the relationship properties.
            /// </param>
            /// <param name='ifMatch'>
            /// Only perform the operation if the entity's etag matches one of the etags
            /// provided or * is provided.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DigitalTwinsUpdateRelationshipHeaders> UpdateRelationshipAsync(this IDigitalTwinsOperations operations, string id, string relationshipId, IList<object> patchDocument = default(IList<object>), string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRelationshipWithHttpMessagesAsync(id, relationshipId, patchDocument, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Retrieves the relationships from a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is no digital twin with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='relationshipName'>
            /// The name of the relationship.
            /// </param>
            public static IPage<object> ListRelationships(this IDigitalTwinsOperations operations, string id, string relationshipName = default(string))
            {
                return operations.ListRelationshipsAsync(id, relationshipName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the relationships from a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is no digital twin with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='relationshipName'>
            /// The name of the relationship.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<object>> ListRelationshipsAsync(this IDigitalTwinsOperations operations, string id, string relationshipName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRelationshipsWithHttpMessagesAsync(id, relationshipName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all incoming relationship for a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is no digital twin with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            public static IPage<IncomingRelationship> ListIncomingRelationships(this IDigitalTwinsOperations operations, string id)
            {
                return operations.ListIncomingRelationshipsAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all incoming relationship for a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is no digital twin with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IncomingRelationship>> ListIncomingRelationshipsAsync(this IDigitalTwinsOperations operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListIncomingRelationshipsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends telemetry on behalf of a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is no digital twin with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='telemetry'>
            /// The telemetry measurements to send from the digital twin.
            /// </param>
            /// <param name='dtId'>
            /// A unique message identifier (in the scope of the digital twin id) that is
            /// commonly used for de-duplicating messages.
            /// </param>
            /// <param name='dtTimestamp'>
            /// An RFC 3339 timestamp that identifies the time the telemetry was measured.
            /// </param>
            public static void SendTelemetry(this IDigitalTwinsOperations operations, string id, object telemetry, string dtId, string dtTimestamp = default(string))
            {
                operations.SendTelemetryAsync(id, telemetry, dtId, dtTimestamp).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends telemetry on behalf of a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is no digital twin with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='telemetry'>
            /// The telemetry measurements to send from the digital twin.
            /// </param>
            /// <param name='dtId'>
            /// A unique message identifier (in the scope of the digital twin id) that is
            /// commonly used for de-duplicating messages.
            /// </param>
            /// <param name='dtTimestamp'>
            /// An RFC 3339 timestamp that identifies the time the telemetry was measured.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendTelemetryAsync(this IDigitalTwinsOperations operations, string id, object telemetry, string dtId, string dtTimestamp = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendTelemetryWithHttpMessagesAsync(id, telemetry, dtId, dtTimestamp, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Sends telemetry on behalf of a component in a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is either no digital twin with the provided id or
            /// the component path is invalid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='componentPath'>
            /// The name of the DTDL component.
            /// </param>
            /// <param name='telemetry'>
            /// The telemetry measurements to send from the digital twin's component.
            /// </param>
            /// <param name='dtId'>
            /// A unique message identifier (in the scope of the digital twin id) that is
            /// commonly used for de-duplicating messages.
            /// </param>
            /// <param name='dtTimestamp'>
            /// An RFC 3339 timestamp that identifies the time the telemetry was measured.
            /// </param>
            public static void SendComponentTelemetry(this IDigitalTwinsOperations operations, string id, string componentPath, object telemetry, string dtId, string dtTimestamp = default(string))
            {
                operations.SendComponentTelemetryAsync(id, componentPath, telemetry, dtId, dtTimestamp).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends telemetry on behalf of a component in a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is either no digital twin with the provided id or
            /// the component path is invalid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='componentPath'>
            /// The name of the DTDL component.
            /// </param>
            /// <param name='telemetry'>
            /// The telemetry measurements to send from the digital twin's component.
            /// </param>
            /// <param name='dtId'>
            /// A unique message identifier (in the scope of the digital twin id) that is
            /// commonly used for de-duplicating messages.
            /// </param>
            /// <param name='dtTimestamp'>
            /// An RFC 3339 timestamp that identifies the time the telemetry was measured.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendComponentTelemetryAsync(this IDigitalTwinsOperations operations, string id, string componentPath, object telemetry, string dtId, string dtTimestamp = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendComponentTelemetryWithHttpMessagesAsync(id, componentPath, telemetry, dtId, dtTimestamp, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves a component from a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 404 (Not Found): There is either no digital twin with the provided id or
            /// the component path is invalid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='componentPath'>
            /// The name of the DTDL component.
            /// </param>
            public static object GetComponent(this IDigitalTwinsOperations operations, string id, string componentPath)
            {
                return operations.GetComponentAsync(id, componentPath).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a component from a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 404 (Not Found): There is either no digital twin with the provided id or
            /// the component path is invalid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='componentPath'>
            /// The name of the DTDL component.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetComponentAsync(this IDigitalTwinsOperations operations, string id, string componentPath, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetComponentWithHttpMessagesAsync(id, componentPath, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a component on a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is either no digital twin with the provided id or
            /// the component path is invalid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='componentPath'>
            /// The name of the DTDL component.
            /// </param>
            /// <param name='patchDocument'>
            /// An update specification described by JSON Patch. Updates to property values
            /// and $model elements may happen in the same request. Operations are limited
            /// to add, replace and remove.
            /// </param>
            /// <param name='ifMatch'>
            /// Only perform the operation if the entity's etag matches one of the etags
            /// provided or * is provided.
            /// </param>
            public static DigitalTwinsUpdateComponentHeaders UpdateComponent(this IDigitalTwinsOperations operations, string id, string componentPath, IList<object> patchDocument = default(IList<object>), string ifMatch = default(string))
            {
                return operations.UpdateComponentAsync(id, componentPath, patchDocument, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a component on a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is either no digital twin with the provided id or
            /// the component path is invalid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the digital twin. The id is unique within the service and case
            /// sensitive.
            /// </param>
            /// <param name='componentPath'>
            /// The name of the DTDL component.
            /// </param>
            /// <param name='patchDocument'>
            /// An update specification described by JSON Patch. Updates to property values
            /// and $model elements may happen in the same request. Operations are limited
            /// to add, replace and remove.
            /// </param>
            /// <param name='ifMatch'>
            /// Only perform the operation if the entity's etag matches one of the etags
            /// provided or * is provided.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DigitalTwinsUpdateComponentHeaders> UpdateComponentAsync(this IDigitalTwinsOperations operations, string id, string componentPath, IList<object> patchDocument = default(IList<object>), string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateComponentWithHttpMessagesAsync(id, componentPath, patchDocument, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Retrieves the relationships from a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is no digital twin with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<object> ListRelationshipsNext(this IDigitalTwinsOperations operations, string nextPageLink)
            {
                return operations.ListRelationshipsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the relationships from a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is no digital twin with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<object>> ListRelationshipsNextAsync(this IDigitalTwinsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRelationshipsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all incoming relationship for a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is no digital twin with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<IncomingRelationship> ListIncomingRelationshipsNext(this IDigitalTwinsOperations operations, string nextPageLink)
            {
                return operations.ListIncomingRelationshipsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all incoming relationship for a digital twin.
            /// Status codes:
            /// 200 (OK): Success.
            /// 400 (Bad Request): The request is invalid.
            /// 404 (Not Found): There is no digital twin with the provided id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IncomingRelationship>> ListIncomingRelationshipsNextAsync(this IDigitalTwinsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListIncomingRelationshipsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
